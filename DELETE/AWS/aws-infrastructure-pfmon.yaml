AWSTemplateFormatVersion: '2010-09-09'
Description: 'Trading Journal - Serverless AWS Infrastructure with Cognito, DynamoDB, S3 (PFMON.COM VERSION)'

Parameters:
  ProjectName:
    Type: String
    Default: pfmon-test
    Description: Name of the project for resource naming

  DomainName:
    Type: String
    Description: Your domain name (e.g., yourdomain.com)
    Default: pfmon.com

  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for pfmon.com (leave empty to skip DNS automation)
    Default: "Z05167923T7K3L4N0ST0Q"

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]

Resources:
  # Cognito User Pool (Updated for case-insensitive usernames)
  UserPoolV2:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ProjectName}-UserPool-V2"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
        - SMS_MFA
      SmsConfiguration:
        SnsCallerArn: !GetAtt CognitoSMSRole.Arn
        ExternalId: !Sub "${ProjectName}-external-id"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${ProjectName}-WebApp"
      UserPoolId: !Ref UserPoolV2
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      AccessTokenValidity: 15
      IdTokenValidity: 15
      RefreshTokenValidity: 7
      # OAuth 2.0 Configuration for Hosted UI
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - phone
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - "http://localhost:3000/"
        - !Sub "https://app.${DomainName}/"
      LogoutURLs:
        - "http://localhost:3000/"
        - !Sub "https://app.${DomainName}/"

  # Cognito Domain for Hosted UI
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${ProjectName}-login"
      UserPoolId: !Ref UserPoolV2

  # Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${ProjectName}-IdentityPool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPoolV2.ProviderName

  # IAM Role for Cognito SMS
  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Sub "${ProjectName}-external-id"
      Policies:
        - PolicyName: CognitoSMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"

  # IAM Roles for Identity Pool
  AuthenticatedRole:
    Type: AWS::IAM::Role
    DependsOn: FileBucket
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Statement:
              # DynamoDB Access - User can only access their own data
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                Resource: 
                  - !GetAtt UserCredentialsTable.Arn
                  - !GetAtt JournalEntriesTable.Arn
                  - !GetAtt AccountDataTable.Arn
                  - !GetAtt UserProfilesTable.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys: 
                      - "$${cognito-identity.amazonaws.com:sub}"
              # S3 Access - User can only access their folder  
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 
                  - "${BucketArn}/users/$${CognitoSub}/*"
                  - BucketArn: !GetAtt FileBucket.Arn
                    CognitoSub: "$${cognito-identity.amazonaws.com:sub}"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt FileBucket.Arn
                Condition:
                  StringLike:
                    s3:prefix: "users/$${cognito-identity.amazonaws.com:sub}/*"

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: UnauthenticatedUserPolicy
          PolicyDocument:
            Statement:
              - Effect: Deny
                Action: "*"
                Resource: "*"

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # DynamoDB Tables (Fixed names to match your React app)
  UserCredentialsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-UserCredentials"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: tradingSystem
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: tradingSystem
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  JournalEntriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-JournalEntries"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: entryId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: entryId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  AccountDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-AccountData"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: accountId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: accountId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  UserProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-UserProfiles"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: dataType
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: dataType
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # S3 Bucket for User File Storage (FIXED - auto-generated name)
  FileBucket:
    Type: AWS::S3::Bucket
    Properties:
      # Removed BucketName to auto-generate unique name
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: 
              - !Sub "https://app.${DomainName}"
              - "http://localhost:3000"  # For development
            MaxAge: 3000

  # KMS Key for Encryption
  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "${ProjectName} - Trading Credentials Encryption Key"
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt AuthenticatedRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}-encryption-key"
      TargetKeyId: !Ref EncryptionKey

  # Amplify App (FIXED - removed invalid repository)
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub "${ProjectName}-TradingJournal"
      Platform: WEB
      EnvironmentVariables:
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPoolV2
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region
        - Name: REACT_APP_S3_BUCKET
          Value: !Ref FileBucket
      CustomRules:
        - Source: "/<*>"
          Target: "/index.html"
          Status: "200"

  # Amplify Branch
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      Framework: React
      Stage: PRODUCTION
      EnableAutoBuild: false

  # Amplify Domain (only if HostedZoneId provided)
  AmplifyDomain:
    Type: AWS::Amplify::Domain
    Condition: HasHostedZone
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      DomainName: !Ref DomainName
      SubDomainSettings:
        - BranchName: !GetAtt AmplifyBranch.BranchName
          Prefix: app

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPoolV2
    Export:
      Name: !Sub "${ProjectName}-UserPoolId"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${ProjectName}-UserPoolClientId"

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${ProjectName}-IdentityPoolId"

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${ProjectName}-Region"

  S3BucketName:
    Description: S3 Bucket Name for User Files
    Value: !Ref FileBucket
    Export:
      Name: !Sub "${ProjectName}-S3Bucket"

  KMSKeyId:
    Description: KMS Key ID for encryption
    Value: !Ref EncryptionKey
    Export:
      Name: !Sub "${ProjectName}-KMSKey"

  AmplifyAppId:
    Description: Amplify App ID
    Value: !GetAtt AmplifyApp.AppId
    Export:
      Name: !Sub "${ProjectName}-AmplifyApp"

  AmplifyURL:
    Description: Amplify App URL
    Value: !Sub 
      - "https://${BranchName}.${AppId}.amplifyapp.com"
      - BranchName: !GetAtt AmplifyBranch.BranchName
        AppId: !GetAtt AmplifyApp.AppId

  CustomDomainURL:
    Description: Custom Domain URL (if configured)
    Condition: HasHostedZone
    Value: !Sub "https://app.${DomainName}"

  CognitoDomainURL:
    Description: Cognito Hosted UI Domain URL
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"

  ReactConfig:
    Description: Configuration for React app
    Value: !Sub |
      {
        "Auth": {
          "Cognito": {
            "userPoolId": "${UserPoolV2}",
            "userPoolClientId": "${UserPoolClient}",
            "identityPoolId": "${IdentityPool}",
            "region": "${AWS::Region}",
            "loginWith": {
              "email": true
            },
            "signUpVerificationMethod": "code",
            "userAttributes": {
              "email": { "required": true }
            },
            "allowGuestAccess": false,
            "passwordFormat": {
              "minLength": 12,
              "requireLowercase": true,
              "requireNumbers": true,
              "requireSymbols": true,
              "requireUppercase": true
            }
          }
        },
        "Storage": {
          "S3": {
            "bucket": "${FileBucket}",
            "region": "${AWS::Region}"
          }
        }
      }