AWSTemplateFormatVersion: '2010-09-09'
Description: 'Trading Journal - Serverless AWS Infrastructure with Cognito, DynamoDB, S3'

Parameters:
  ProjectName:
    Type: String
    Default: pfmon
    Description: Name of the project for resource naming

  DomainName:
    Type: String
    Description: Your domain name (e.g., yourdomain.com)
    Default: tiltedtrades.com

  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for the domain (leave empty to skip DNS automation)
    Default: "Z01761811HIMK6DU561T0"

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ProjectName}-UserPool"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      MfaConfiguration: REQUIRED
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
        - SMS_MFA
      SmsConfiguration:
        SnsCallerArn: !GetAtt CognitoSMSRole.Arn
        ExternalId: !Sub "${ProjectName}-external-id"
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: phone_number
          AttributeDataType: String
          Required: false
          Mutable: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${ProjectName}-WebApp"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      AccessTokenValidity: 15
      IdTokenValidity: 15
      RefreshTokenValidity: 7

  # Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${ProjectName}-IdentityPool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Role for Cognito SMS
  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-CognitoSMSRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Sub "${ProjectName}-external-id"
      Policies:
        - PolicyName: CognitoSMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"

  # IAM Roles for Identity Pool
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-AuthenticatedRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Statement:
              # DynamoDB Access - User can only access their own data
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                Resource: 
                  - !GetAtt UsersTable.Arn
                  - !GetAtt AccountsTable.Arn
                  - !GetAtt EntriesTable.Arn
                  - !GetAtt SystemsTable.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys: 
                      - "${cognito-identity.amazonaws.com:sub}"
              # S3 Access - User can only access their folder
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Join 
                  - ""
                  - - !GetAtt FileBucket.Arn
                    - "/user-${cognito-identity.amazonaws.com:sub}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt FileBucket.Arn
                Condition:
                  StringLike:
                    s3:prefix: "user-${cognito-identity.amazonaws.com:sub}/*"

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-UnauthenticatedRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: UnauthenticatedUserPolicy
          PolicyDocument:
            Statement:
              - Effect: Deny
                Action: "*"
                Resource: "*"

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Accounts"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: accountId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: accountId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  EntriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Entries"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: entryId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: entryId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  SystemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Systems"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: systemId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: systemId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # S3 Bucket for User File Storage (uploads, attachments)
  FileBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join 
        - "-"
        - - !Ref ProjectName
          - !Ref DomainName  
          - "files"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: 
              - !Sub "https://app.${DomainName}"
              - "http://localhost:3000"  # For development
            MaxAge: 3000

  # S3 Bucket for Amplify Hosting Source (React build files)
  HostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-app-hosting"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # KMS Key for Encryption
  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "${ProjectName} - Trading Credentials Encryption Key"
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt AuthenticatedRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join 
        - ""
        - - "alias/"
          - !Ref ProjectName
          - "-encryption-key"
      TargetKeyId: !Ref EncryptionKey

  # IAM Role for Amplify Service
  AmplifyServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-AmplifyServiceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AmplifyS3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource:
                  - !Sub "${HostingBucket.Arn}/*"
                  - !GetAtt HostingBucket.Arn

  # Amplify App for Production
  AmplifyAppProd:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub "${ProjectName}-App-Prod"
      Repository: !Sub "https://s3.amazonaws.com/${HostingBucket}"
      Platform: WEB_COMPUTE
      IAMServiceRole: !GetAtt AmplifyServiceRole.Arn
      EnvironmentVariables:
        - Name: REACT_APP_ENV
          Value: production
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region
        - Name: REACT_APP_S3_BUCKET
          Value: !Ref FileBucket
      CustomRules:
        - Source: "/<*>"
          Target: "/index.html"
          Status: "404-200"

  # Amplify Branch for Production
  AmplifyBranchProd:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyAppProd.AppId
      BranchName: main
      Framework: React
      Stage: PRODUCTION
      EnableAutoBuild: false  # Manual deployment from S3

  # Amplify Domain for Production
  AmplifyDomainProd:
    Type: AWS::Amplify::Domain
    Properties:
      AppId: !GetAtt AmplifyAppProd.AppId
      DomainName: !Ref DomainName
      SubDomainSettings:
        - BranchName: !GetAtt AmplifyBranchProd.BranchName
          Prefix: app

  # Amplify App for Development
  AmplifyAppDev:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub "${ProjectName}-App-Dev"
      Repository: !Sub "https://s3.amazonaws.com/${HostingBucket}"
      Platform: WEB_COMPUTE
      IAMServiceRole: !GetAtt AmplifyServiceRole.Arn
      EnvironmentVariables:
        - Name: REACT_APP_ENV
          Value: development
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region
        - Name: REACT_APP_S3_BUCKET
          Value: !Ref FileBucket
      CustomRules:
        - Source: "/<*>"
          Target: "/index.html"
          Status: "404-200"

  # Amplify Branch for Development
  AmplifyBranchDev:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyAppDev.AppId
      BranchName: dev
      Framework: React
      Stage: DEVELOPMENT
      EnableAutoBuild: false  # Manual deployment from S3

  # Amplify Domain for Development
  AmplifyDomainDev:
    Type: AWS::Amplify::Domain
    Properties:
      AppId: !GetAtt AmplifyAppDev.AppId
      DomainName: !Ref DomainName
      SubDomainSettings:
        - BranchName: !GetAtt AmplifyBranchDev.BranchName
          Prefix: dev.app

  # Note: Amplify automatically manages DNS records and SSL certificates
  # when you add a custom domain. Manual Route53 records are not needed.

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${ProjectName}-UserPoolId"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${ProjectName}-UserPoolClientId"

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${ProjectName}-IdentityPoolId"

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${ProjectName}-Region"

  S3FilesBucketName:
    Description: S3 Bucket Name for User Files
    Value: !Ref FileBucket
    Export:
      Name: !Sub "${ProjectName}-S3FilesBucket"

  S3HostingBucketName:
    Description: S3 Bucket Name for App Hosting
    Value: !Ref HostingBucket
    Export:
      Name: !Sub "${ProjectName}-S3HostingBucket"

  KMSKeyId:
    Description: KMS Key ID for encryption
    Value: !Ref EncryptionKey
    Export:
      Name: !Sub "${ProjectName}-KMSKey"

  AmplifyAppProdId:
    Description: Amplify App ID for Production
    Value: !GetAtt AmplifyAppProd.AppId
    Export:
      Name: !Sub "${ProjectName}-AmplifyAppProd"

  AmplifyAppDevId:
    Description: Amplify App ID for Development
    Value: !GetAtt AmplifyAppDev.AppId
    Export:
      Name: !Sub "${ProjectName}-AmplifyAppDev"

  ProductionURL:
    Description: Production App URL
    Value: !Sub "https://app.${DomainName}"
    Export:
      Name: !Sub "${ProjectName}-ProductionURL"

  DevelopmentURL:
    Description: Development App URL
    Value: !Join 
      - ""
      - - "https://dev.app."
        - !Ref DomainName
    Export:
      Name: !Sub "${ProjectName}-DevelopmentURL"

  Route53Instructions:
    Description: Domain Setup Instructions
    Value: !Sub 
      - "After deployment: Go to Amplify Console > Domain Management > Verify domain ownership for ${AppDomain} and ${DevDomain}. Amplify will provide DNS records to add to Route53."
      - AppDomain: !Sub "app.${DomainName}"
        DevDomain: !Join ["", ["dev.app.", !Ref DomainName]]

  # Configuration for React App
  ReactAppConfig:
    Description: Configuration object for React app
    Value: !Sub |
      {
        "Auth": {
          "Cognito": {
            "userPoolId": "${UserPool}",
            "userPoolClientId": "${UserPoolClient}",
            "identityPoolId": "${IdentityPool}",
            "region": "${AWS::Region}",
            "loginWith": {
              "email": true
            },
            "signUpVerificationMethod": "code",
            "userAttributes": {
              "email": { "required": true }
            },
            "allowGuestAccess": false,
            "passwordFormat": {
              "minLength": 12,
              "requireLowercase": true,
              "requireNumbers": true,
              "requireSymbols": true,
              "requireUppercase": true
            }
          }
        },
        "Storage": {
          "S3": {
            "bucket": "${FileBucket}",
            "region": "${AWS::Region}"
          }
        }
      }